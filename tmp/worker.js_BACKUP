


function runWithTimeout(timeoutMs, promise){
	return Promise.race([
		promise,
		new Promise((_, reject) => 
			setTimeout(() => reject(new Error("Execution time exceeded")), timeoutMs)
			),
	]);
}

var times = 0
async function update_game_state(state){
	times++
	console.log("We're getting called!!!");
	console.log(times, state);
	const x = await new Promise((resolve) => {
        setTimeout(() => resolve(true), 1000); 
    });
	console.log(x)
	return x
}

function log(msg){
	console.log("Python:",  msg)
}

try {
	importScripts("https://cdn.jsdelivr.net/pyodide/v0.27.5/full/pyodide.js");
    let pyodide = null;
	(async () => {
		console.log("Worker: Loading Pyodide");
		pyodide = await loadPyodide();
		console.log("Worker: Pyodide loaded");
		console.log("Running robuzzle.py to set up the global namespace");
		const response = await fetch("robuzzle.py")
		const code     = await response.text()
		await pyodide.runPython(code);
		console.log("Done");

		pyodide.setStdout({
			batched: (str) => {
				console.log("stdout:", str)
				self.postMessage({ type: 'stdout', data: str });
			}
		});
		pyodide.setStderr({ 
			batched: (str) => {
				console.log("stderr:", str);
				self.postMessage({ type: 'error', data: `STDERR: ${str}` });
			}
		});
		console.log("Worker: notifying ready")
		self.postMessage({type: 'ready'})

		
		self.onmessage = async (event) => {
			console.log("The onmessage event is ", event.message);
			const code = event.data.code;
			let isolated_namespace = null;
			try {
				console.log("Worker: setting up temporary namespace");
				isolated_namespace = pyodide.globals.copy();
				console.log("Worker: Executing python script in isolated namespace", code)
				const result = await runWithTimeout(2000,
					pyodide.runPythonAsync(
						code,
						{globals: isolated_namespace}
					)
				);
				console.log("Worker: script terminated with result", result);
			} catch (e) {
				console.error("ERROR. Worker. script execution failed", e.message);
			}
			finally {
				console.log("Worker: Destroying isolated namespace");
				isolated_namespace.destroy();	
			}
		}
	})()
} catch (e) {
    console.error("ERROR. Worker: failed setting up pyodide");
	console.error(e);
	self.postMessage({type: 'error', data: "Pyodide setup failed. See console logs"})
}

